// ====================================================================================
// Mixins
// ====================================================================================

// Layout

@mixin flex($dir: row, $wrap: wrap, $just: null, $align: null) {
  display: flex;
  flex-flow: $dir $wrap;
  justify-content: $just;
  align-items: $align;
  @content;
}

// Mobile first breakpoint mixin
@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {
  $min: breakpoint-min($name, $breakpoints);

  @if $min {
    @media (min-width: $min) {
      @content;
    }
  } @else {
    @content;
  }
}

// Desktop first breakpoint mixin
@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {
  $max: breakpoint-max($name, $breakpoints);

  @if $max {
    @media (max-width: $max) {
      @content;
    }
  } @else {
    @content;
  }
}

// Between breakpoint mixin
@mixin media-breakpoint-between(
  $lower,
  $upper,
  $breakpoints: $grid-breakpoints
) {
  $min: breakpoint-min($lower, $breakpoints);
  $max: breakpoint-max($upper, $breakpoints);

  @if $min != null and $max != null {
    @media (min-width: $min) and (max-width: $max) {
      @content;
    }
  } @else if $max == null {
    @include media-breakpoint-up($lower, $breakpoints) {
      @content;
    }
  } @else if $min == null {
    @include media-breakpoint-down($upper, $breakpoints) {
      @content;
    }
  }
}

// Specific breakpoint mixin
@mixin media-breakpoint-only($name, $breakpoints: $grid-breakpoints) {
  $min: breakpoint-min($name, $breakpoints);
  $max: breakpoint-max($name, $breakpoints);

  @if $min != null and $max != null {
    @media (min-width: $min) and (max-width: $max) {
      @content;
    }
  } @else if $max == null {
    @include media-breakpoint-up($name, $breakpoints) {
      @content;
    }
  } @else if $min == null {
    @include media-breakpoint-down($name, $breakpoints) {
      @content;
    }
  }
}

// Print specific breakpoint mixin
@mixin media-breakpoint-print($print-orientation) {
  @if $print-orientation == por {
    @media print {
      @page {
        size: portrait;
      }
      @content;
    }
  } @else if $print-orientation == land {
    @media print {
      @page {
        size: landscape;
      }
      @content;
    }
  } @else {
    @media print {
      @content;
    }
  }
}

// Used to evaluate Sass maps like our grid breakpoints.

@mixin _assert-ascending($map, $map-name) {
  $prev-key: null;
  $prev-num: null;
  @each $key, $num in $map {
    @if $prev-num == null {
      // Do nothing
    } @else if not comparable($prev-num, $num) {
      @warn "Potentially invalid value for #{$map-name}: This map must be in ascending order, but key #{$key} has value #{$num} whose unit makes it incomparable to #{$prev-num}, the value of the previous key #{$prev-key} !";
    } @else if $prev-num >= $num {
      @warn "Invalid value for #{$map-name}: This map must be in ascending order, but key #{$key} has value #{$num} which isn't greater than #{$prev-num}, the value of the previous key #{$prev-key} !";
    }
    $prev-key: $key;
    $prev-num: $num;
  }
}

// Starts at zero

@mixin _assert-starts-at-zero($map) {
  $values: map-values($map);
  $first-value: nth($values, 1);
  @if $first-value != 0 {
    @warn "First breakpoint in `$grid-breakpoints` must start at 0, but starts at #{$first-value}.";
  }
}

// Bg colors

@mixin bg-colors($map) {
  @each $theme, $color in $map {
    &--#{$theme} {
      background-color: $color;

      &:hover {
        background-color: rgba($color, 0.9);
      }
    }
  }
}

// Arrows

@mixin arrow($color: $color-Accent1) {
  & {
    @include pseudo-el("after", 0, 0) {
      @extend %arrow;
      border-top-color: $color;
      position: static;
    }
  }
}

// Pseudo-elements

@mixin pseudo-el($el, $el-width, $el-height) {
  @if $el == "before" or $el == "after" {
    &::#{$el} {
      @extend %pseudos;
      width: $el-width;
      height: $el-height;
      @content;
    }
  } @else {
    @error "`#{$el}` is not a valid pseudo-element.";
  }
}

// Keyframes

@mixin keyframes($name) {
  @-webkit-keyframes #{$name} {
    @content;
  }
  @-moz-keyframes #{$name} {
    @content;
  }
  @-ms-keyframes #{$name} {
    @content;
  }
  @keyframes #{$name} {
    @content;
  }
}

// Placeholders

@mixin placeholder($width: 100%, $height: 50px) {
  width: $width;
  height: $height;
  background-color: rgba($color-black, 0.5);
  margin-bottom: 0.5em;
  @include keyframes("hintloading") {
    0% {
      opacity: 0.5;
    }

    50% {
      opacity: 1;
    }

    100% {
      opacity: 0.5;
    }
  }
  animation: hintloading 2s ease-in-out 0s infinite reverse;
  @content;
}
